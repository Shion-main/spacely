---
description:
globs:
alwaysApply: false
---
# API Routes Guide

SPACELY uses Next.js API routes following RESTful conventions with proper error handling and authentication.

## Authentication Routes

- **Register**: [app/api/auth/register/route.ts](mdc:app/api/auth/register/route.ts) - User registration with validation
- **Auth Callback**: [app/auth/callback/route.ts](mdc:app/auth/callback/route.ts) - Supabase auth callback

## Listings Management

- **Listings CRUD**: [app/api/listings/route.ts](mdc:app/api/listings/route.ts) - GET (with filters), POST (create)
- **Individual Listing**: [app/api/listings/[id]/route.ts](mdc:app/api/listings/[id]/route.ts) - GET, PUT, DELETE by ID
- **Location Extraction**: [app/api/extract-location/route.ts](mdc:app/api/extract-location/route.ts) - Extract coordinates from map URLs

## User Features

- **Profile Listings**: [app/api/profile/listings/route.ts](mdc:app/api/profile/listings/route.ts) - User's own listings
- **Favorites**: [app/api/favorites/[id]/route.ts](mdc:app/api/favorites/[id]/route.ts) - Add/remove favorites
- **Profile Favorites**: [app/api/profile/favorites/route.ts](mdc:app/api/profile/favorites/route.ts) - Get user favorites

## Admin Routes

- **Admin Stats**: [app/api/admin/stats/route.ts](mdc:app/api/admin/stats/route.ts) - Dashboard statistics
- **Pending Listings**: [app/api/admin/pending-listings/route.ts](mdc:app/api/admin/pending-listings/route.ts) - Approval queue
- **Admin Listings**: [app/api/admin/listings/[id]/route.ts](mdc:app/api/admin/listings/[id]/route.ts) - Approve/reject listings
- **User Management**: [app/api/admin/users/route.ts](mdc:app/api/admin/users/route.ts) - User administration
- **User Actions**: [app/api/admin/users/[id]/route.ts](mdc:app/api/admin/users/[id]/route.ts) - Ban/unban users
- **Reports**: [app/api/admin/reports/route.ts](mdc:app/api/admin/reports/route.ts) - Content moderation

## Reference Data

- **Room Types**: [app/api/room-types/route.ts](mdc:app/api/room-types/route.ts) - Available rental types

## Common Patterns

- All routes use proper HTTP status codes and error handling
- Authentication is handled via Supabase middleware in [middleware.ts](mdc:middleware.ts)
- RLS policies control data access at the database level
- Form validation uses Zod schemas from [lib/validations.ts](mdc:lib/validations.ts)
